import{_ as r,M as t,p as o,q as l,R as e,t as a,N as n,a1 as i}from"./framework-5866ffd3.js";const d={},c=i(`<p>有多种方式安装RxJS：</p><h4 id="es2015-via-npm" tabindex="-1"><a class="header-anchor" href="#es2015-via-npm" aria-hidden="true">#</a> ES2015 via npm</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm install rxjs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认情况下，RxJS 7.x 将根据消费者提供不同的代码变体：</p><ul><li>当 RxJS 7.x 在 Node.js 上使用时，无论是通过require还是消费import，都会提供针对 ES5 的 CommonJS 代码来执行。</li><li>当通过针对浏览器（或其他非 Node.js 平台）的捆绑器使用 RxJS 7.4+ 时，默认情况下将提供针对 ES5 的 ES 模块代码以及使用 ES2015 代码的选项。7.4.0 之前的 7.x 版本将仅提供 ES5 代码。</li></ul><p>如果项目的目标浏览器支持 ES2015+ 或捆绑过程支持降级到 ES5，则可以选择将捆绑器配置为允许使用 ES2015 RxJS 代码。es2015您可以通过将捆绑器配置为在模块解析期间使用自定义导出条件来启用对使用 ES2015 RxJS 代码的支持。配置捆绑器以使用es2015自定义导出条件特定于每个捆绑器。如果您有兴趣使用此选项，请查阅您的捆绑程序的文档以获取更多信息。但是，可以在此处找到一些一般信息：</p>`,6),p={href:"https://webpack.js.org/guides/package-exports/#conditions-custom",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/rollup/plugins/blob/node-resolve-v11.0.0/packages/node-resolve/README.md#exportconditions",target:"_blank",rel:"noopener noreferrer"},u=i(`<h4 id="通过-npm-的-commonjs" tabindex="-1"><a class="header-anchor" href="#通过-npm-的-commonjs" aria-hidden="true">#</a> 通过 npm 的 CommonJS</h4><p>如果您在使用 RxJS 时收到错误 TS2304: Cannot find name &#39;Promise&#39; 或 error TS2304: Cannot find name &#39;Iterable&#39; 之类的错误，您可能需要安装一组补充类型。</p><ol><li>对于打字用户：</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>typings install es6<span class="token operator">-</span>shim <span class="token operator">--</span>ambient
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>如果您不使用类型化，则可以从 /es6-shim/es6-shim.d.ts 复制接口。</li><li>添加包含在 tsconfig.json 或 CLI 参数中的类型定义文件。</li></ol><h4 id="通过-npm-的所有模块类型-cjs-es6-amd-typescript" tabindex="-1"><a class="header-anchor" href="#通过-npm-的所有模块类型-cjs-es6-amd-typescript" aria-hidden="true">#</a> 通过 npm 的所有模块类型 (CJS/ES6/AMD/TypeScript)</h4><p>要通过 npm 版本 3 安装此库，请使用以下命令：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm install @reactivex<span class="token operator">/</span>rxjs
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果您使用的是 npm 版本 2，则需要明确指定库版本：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm install @reactivex<span class="token operator">/</span>rxjs@<span class="token number">7.3</span><span class="token number">.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="内容分发网络" tabindex="-1"><a class="header-anchor" href="#内容分发网络" aria-hidden="true">#</a> 内容分发网络</h4><p>对于 CDN，您可以使用<code>[unpkg](https://unpkg.com/)</code>： <code>[https://unpkg.com/rxjs@^7/dist/bundles/rxjs.umd.min.js](https://unpkg.com/rxjs@^7/dist/bundles/rxjs.umd.min.js)</code></p>`,12);function h(v,x){const s=t("ExternalLinkIcon");return o(),l("div",null,[c,e("ul",null,[e("li",null,[e("a",p,[a("https://webpack.js.org/guides/package-exports/#conditions-custom"),n(s)])]),e("li",null,[e("a",m,[a("https://github.com/rollup/plugins/blob/node-resolve-v11.0.0/packages/node-resolve/README.md#exportconditions"),n(s)])])]),u])}const b=r(d,[["render",h],["__file","2.RxJS安装说明.html.vue"]]);export{b as default};
