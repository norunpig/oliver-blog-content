import{_ as e,p as a,q as l,a1 as s}from"./framework-5866ffd3.js";const p={},i=s(`<h1 id="gulp简介" tabindex="-1"><a class="header-anchor" href="#gulp简介" aria-hidden="true">#</a> gulp简介</h1><h2 id="gulp介绍" tabindex="-1"><a class="header-anchor" href="#gulp介绍" aria-hidden="true">#</a> gulp介绍</h2><h3 id="什么是gulp" tabindex="-1"><a class="header-anchor" href="#什么是gulp" aria-hidden="true">#</a> 什么是gulp</h3><p>gulp 是一个基于流的工具包，自动化构建工具，可帮助你自动执行开发工作流程中痛苦或耗时的任务,比如你的sass或less的编译或者模版文件的编译，好比你修改了scss文件中的一处，编译压缩打包等等一些列后面的工作就是gulp自动帮你完成。 gulp是基于Nodejs的自动任务运行器，它能自动完成前端代码的测试、检查、合并、压缩、格式化、浏览器自动发刷新、多浏览器同步、监听文件的改动等等。</p><h3 id="什么是流" tabindex="-1"><a class="header-anchor" href="#什么是流" aria-hidden="true">#</a> 什么是流</h3><p>对于流很多没接触过的小伙伴可能比较陌生，如果有使用RXJS等语法对于流应该很清楚。流 就像名字一样 跟水流是一样有源头也会有很多大坝拦截水流发电之类的在往下游继续放直到目的地。 流中有pipe管道概念， 这里pipe可以看成是一个大坝，就是类似于大坝对水流处理在流向下一个大坝,有点类似jq中的链式操作dom.html(&#39;xxx&#39;).css(xxx).attr(xxx)...., 或者promise.then().then()前一个then返回的结果会给到第二个then的参数继续做处理直到结束。对于stream编程感兴趣可以去学习下RXJS等语法。</p><h3 id="gulp和webpack、grunt的对比" tabindex="-1"><a class="header-anchor" href="#gulp和webpack、grunt的对比" aria-hidden="true">#</a> gulp和webpack、grunt的对比</h3><p>其实现在的webpack很强大几乎gulp能做的webpack都能，但是为啥还是有很多人使用gulp嘞，这在于两者的定位，gulp的口号就是自动化和优化你的工作，它是一个自动化帮助你完成工作中痛苦耗时的工具包，日常中的哪些任务比如：</p><ul><li>用es6, typescript编写的脚本温家宝需要编译成浏览器认识的javascript</li><li>用scss，less编写的样式文件需要编译成浏览器认识的css</li><li>检查代码是否符合书写规范，跑单元测试和集成测试</li><li>开发环境部署代码需要压缩合并静态文件，添加文件权限（密码）...等等</li></ul><h2 id="gulp安装" tabindex="-1"><a class="header-anchor" href="#gulp安装" aria-hidden="true">#</a> gulp安装</h2><h3 id="安装cli" tabindex="-1"><a class="header-anchor" href="#安装cli" aria-hidden="true">#</a> 安装cli</h3><p>首先需要安装一个gulp命令行工具，这个东西就是为了让gulp相关的命令可以在命令行运行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm install <span class="token operator">-</span>g gulp<span class="token operator">-</span>cli
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="安装gulp包" tabindex="-1"><a class="header-anchor" href="#安装gulp包" aria-hidden="true">#</a> 安装gulp包</h3><p>接着你需要在你要使用的项目里面去安装gulp包才能使用gulp</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev gulp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里是安装到dev环境(--save-dev)，因为gulp只是我们开发代码的一个工具所有不需要到生成环境。</p><h3 id="检查gulp版本" tabindex="-1"><a class="header-anchor" href="#检查gulp版本" aria-hidden="true">#</a> 检查gulp版本</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>gulp <span class="token operator">--</span>version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="gulpfile文件" tabindex="-1"><a class="header-anchor" href="#gulpfile文件" aria-hidden="true">#</a> gulpfile文件</h2><h3 id="javascript-和-gulpfile" tabindex="-1"><a class="header-anchor" href="#javascript-和-gulpfile" aria-hidden="true">#</a> JavaScript 和 Gulpfile</h3><p>Gulp允许你使用现有JavaScript知识来书写gulpfile文件或者利用你所掌握的gulpfile经验来书写普通的JavaScript代码。虽然gulp提供了一些实用工具来简化文件系统和命令行的操作，但是你所编写的其他代码都是纯JavaScript代码。</p><h3 id="gulpfile-详解" tabindex="-1"><a class="header-anchor" href="#gulpfile-详解" aria-hidden="true">#</a> Gulpfile 详解</h3><p>gulpfile是项目目录下名为gulpfile.js（或者首字母大写Gulpfile.js，就像Makefile一样命名）的文件，在运行gulp命令时会被自动加载。在这个文件中，你经常会看到类似src()、dest()、series() 或parallel()函数之类的gulp API，除此之外，纯JavaScript代码或Node模块也会被使用。任何导出（export）的函数都将注册到gulp的任务（task）系统中。</p><h3 id="gulpfile-转译" tabindex="-1"><a class="header-anchor" href="#gulpfile-转译" aria-hidden="true">#</a> Gulpfile 转译</h3><p>你可以使用需要转译的编程语言来书写gulpfile文件，例如TypeScript或Babel，通过修改gulpfile.js文件的扩展名来表明所用的编程语言并安装对应的转译模块。</p><ul><li>对于<code>TypeScript</code>，重命名为<code>gulpfile.ts</code>并安装<code>ts-node</code>模块。</li><li>对于<code>Babel</code>，重命名为<code>gulpfile.babel.js</code>并安装<code>@babel/register</code>模块。</li></ul><h3 id="gulpfile-分割" tabindex="-1"><a class="header-anchor" href="#gulpfile-分割" aria-hidden="true">#</a> Gulpfile 分割</h3><p>大部分用户起初是将所有业务逻辑都写到一个gulpfile文件中。随着文件的变大，可以将此文件重构为数个独立的文件。 每个任务（task）可以被分割为独立的文件，然后导入<code>（import）到gulpfile文件</code>中并组合。这不仅使事情变得井然有序，而且可以对每个任务（task）进行单独测试，或者根据条件改变组合。 Node的模块解析功能允许你将<code>gulpfile.js</code>文件替换为同样命名为<code>gulpfile.js</code>的目录，该目录中包含了一个名为<code>index.js</code>的文件，该文件被当作<code>gulpfile.js</code>使用。并且，该目录中还可以包含各个独立的任务（task）模块。</p><h3 id="创建gulpfile文件" tabindex="-1"><a class="header-anchor" href="#创建gulpfile文件" aria-hidden="true">#</a> 创建gulpfile文件</h3><p>gulpfile文件是gulp的默认配置文件，利用任何个文本编辑器在项目的根目录下创建一个名为gulpfile.js的文件，并在文件中输入以下内容：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">defaultTask</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// please code for yourdefault task here</span>
    <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
exports<span class="token punctuation">.</span>default <span class="token operator">=</span> defaultTask
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>gulpfile.js如果不放置根目录，那么需要启动gulp手动指定gulp配置文件路径 <code>gulp &lt;tasks?&gt; --gulpfile &lt;path?&gt;</code> 配置文件的名字也可以修改，但是修改后也是需要<code>--gulpfile</code>去指定。</p></blockquote><p>在项目根目录下执行gulp命令</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>gulp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如许运行多个任务（task），可以执行.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>gulp <span class="token operator">&lt;</span>task<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>otherTask<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>有些可能本来之前项目有gulp，但是自己运行报错等等，记得检查gulp的一些依赖，因为gulp还是有很多其它的插件引入之类的，可以看看gulpfile中引入了哪些插件包都要一起安装 gulp 命令的参数：</p><blockquote><p>gulp [options] tasks Options: --version, -v: 打印全局和本地的版本 --require: 在运行gulpfile之前需要一个模块，这对转发器是有用的，但也有其他应用程序。 --gulpfile, -f: 手动设置gulpfile的路径。如果你有多个gulpfiles。这将把CWD设置为Gulpfile目录也是可以的。 --cwd: 手动设置CWD。搜索gulpfile，所有要求的相对路径也将从这里开始。 --verify: 将验证项目包中引用的插件。package.json插件黑名单。 --tasks, -T: 打印加载的gulpfile的任务依赖树。 --tasks-simple: 纯文本打印加载的gulpfile的任务列表 --tasks-json: JSON格式打印加载的gulpfile的任务列表 --tasks-depth, --depth: 指定任务依赖树的深度。 --compact-tasks: 通过只打印顶级任务及其子任务来减少任务依赖树的输出。 --sort-tasks: 将排序的首要任务的任务依赖树。 --color: 将强制gulp和gulp插件显示颜色, 即使没有检测到颜色支持。 --no-color: 将强制gulp和gulp插件不显示颜色, 即使检测到颜色支持。</p></blockquote><blockquote><p>--silent, -S: 抑制所有gulp日志记录。 --continue: 失败后继续执行任务。 --series: 按顺序运行CLI中给出的任务(默认为并行) --log-level, -L: 设置日志级别。-L表示最小verbose， - ll表示最verbose。默认为-LLL</p></blockquote>`,40),n=[i];function t(r,d){return a(),l("div",null,n)}const c=e(p,[["render",t],["__file","什么是gulp.html.vue"]]);export{c as default};
