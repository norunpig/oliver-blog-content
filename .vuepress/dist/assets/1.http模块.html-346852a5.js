import{_ as n,p as s,q as a,a1 as t}from"./framework-5866ffd3.js";const e={},p=t(`<h1 id="http模块" tabindex="-1"><a class="header-anchor" href="#http模块" aria-hidden="true">#</a> http模块</h1><h2 id="什么是http模块" tabindex="-1"><a class="header-anchor" href="#什么是http模块" aria-hidden="true">#</a> 什么是http模块</h2><p>回顾： 什么是<code>客户端</code>、什么是<code>服务器</code> 在网络节点中，负责消费资源的电脑，叫做客户端；负责对外提供网络资源的电脑，脚做服务器。</p><p>http模块是Node.js官方提供的、用来创建web服务器的模块。通过http模块提供的http.createServer()方法，就能方便的把一台普通电脑，变成一台web服务器，从而对外提供Web资源服务。</p><p>如果要希望使用http模块创建Web服务器，则需要先导入它：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="理解http模块的作用" tabindex="-1"><a class="header-anchor" href="#理解http模块的作用" aria-hidden="true">#</a> 理解http模块的作用</h2><p>服务器和普通电脑的区别在于，服务器上安装了web服务器软件，例如：IIS、Apache等。通过安装这些服务器软件，就能把一台普通的电脑变成一台web服务器。</p><p>在Node.js中，我们不需要使用IIS、Apache等这些第三方web服务器软件。因为我们可以基于Node.js提供的http模块，通过几行简单的代码，就能轻松的手写一个服务器软件没从而对外提供web服务。</p><h2 id="服务器相关的概念" tabindex="-1"><a class="header-anchor" href="#服务器相关的概念" aria-hidden="true">#</a> 服务器相关的概念</h2><h3 id="_1-ip-地址" tabindex="-1"><a class="header-anchor" href="#_1-ip-地址" aria-hidden="true">#</a> 1.IP 地址</h3><p>IP地址就是互联网上每台计算机的唯一地址， 因此IP地址具有唯一性。如果把“个人电脑”比作“一台电话”，那么“IP地址”就相当于“电话号码”，只有知道对方IP地址的前提下，才能与对应的电脑之前进行数据通信。</p><p>IP地址的格式： 通常用“点分十进制”表示成（a.b.c.d）的形式，其中，a,b,c,d都是0-255之间的十进制整数。例如：用点分十进表示的IP地址（192.168.1.1）</p><p>注意： 互联网中每台Web服务器，都有自己的IP地址，例如可以在windows的终端中运行ping www.baidu.com命令，即可查看到百度服务器的IP地址。</p><h3 id="_2-域名和域名服务器" tabindex="-1"><a class="header-anchor" href="#_2-域名和域名服务器" aria-hidden="true">#</a> 2.域名和域名服务器</h3><p>尽管IP地址能够唯一地标记网络上的计算机，但IP地址是一长串数字，不直观，而且不便于记忆，于是人们又发明了另一套字符型的地址方案，即所谓的域名（Domain Name）地址。</p><p>Ip地址和域名是一一对应的关系，这份对应关系放在一种叫做域名服务器（DNS，Domain name server）的电脑中。使用者只需通过好记的域名访问对应的服务器即可，对应的转换工作由域名服务器实现。因此，域名服务器就是提供IP地址和域名之间的转换服务的服务器。</p><p>注意： 单纯使用IP地址，互联网中的电脑也能够正常的工作。但是有了域名的加持，能让互联网的世界变得更加方便。 在开发测试期间，127.0.0.1对应的域名是localhost，它们都代表我们自己的这台电脑，在使用效果上没有任何区别。</p><h3 id="_3-端口号" tabindex="-1"><a class="header-anchor" href="#_3-端口号" aria-hidden="true">#</a> 3.端口号</h3><p>计算机中的端口号，就好像是现实生活中的门牌号一样。通过门牌号，外卖小哥可以在整栋大楼众多的房间中，准确把外卖送到你的手中。</p><p>同样的道理，在一台电脑中，可以运行成百上千个web服务。每个web服务都对应一个唯一的端口号。客户端发送过来的网络请求，通过端口号，可以被准确地交给对应的web服务进行处理。</p><p>注意： 每个端口号不能同时被多个web服务占用。 在实际应用中，URL中的80端口可以省略。</p><h2 id="创建最基本的web服务器" tabindex="-1"><a class="header-anchor" href="#创建最基本的web服务器" aria-hidden="true">#</a> 创建最基本的web服务器</h2><h3 id="_1-创建web服务器的基本步骤" tabindex="-1"><a class="header-anchor" href="#_1-创建web服务器的基本步骤" aria-hidden="true">#</a> 1.创建web服务器的基本步骤</h3><ul><li>导入http模块</li><li>创建web服务器实例</li><li>为服务器实例绑定<code>request</code>事件，<code>监听客户端的请求</code></li><li>启动服务器</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//导入http模块</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//创建web服务器实例</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//为服务器实例绑定request事件，即可监听客户端发送过来的网络请求：</span>
<span class="token comment">//使用服务器实例的.on()方法，为服务器绑定一个request事件</span>
server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">//只要有客户端来请求我们自己的服务器，就会触发request事件，从而调用这个事件处理函数</span>

	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Someone visit our web server.&#39;</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">//调用服务器实例的 .listen()方法，即可启动当前的web服务器实例：</span>
server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;http server running at http://127.0.0.1&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-req请求对象" tabindex="-1"><a class="header-anchor" href="#_2-req请求对象" aria-hidden="true">#</a> 2.<code>req</code>请求对象</h3><p>只要服务器接收到了客户端的请求，就会调用通过<code>server.on()</code>为服务器绑定的<code>request事件处理函数</code>。 如果想在事件处理函数中，<strong>访问与客户端相关的<code>数据</code>或<code>属性</code></strong>，可以使用如下的方式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">//req是请求对象，它包含了与客户端相关的数据和属性，例如：</span>
	<span class="token comment">//req.url是客户端请求的URL地址</span>
	<span class="token comment">//req.method是客户端的method请求类型</span>
	<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Your request url is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>req<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, and request menthod is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>req<span class="token punctuation">.</span>menthod<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-res响应对象" tabindex="-1"><a class="header-anchor" href="#_3-res响应对象" aria-hidden="true">#</a> 3.<code>res</code>响应对象</h3><p>在服务器的request事件处理函数中，如果想<strong>访问与服务器相关的<code>数据</code>或<code>属性</code></strong>，可以使用如下的方式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">//res 是响应对象，它包含了与服务器相关的数据和属性，例如：</span>
	<span class="token comment">//要发送到客户端的字符串</span>
	<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Your request url is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>req<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, and request method is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>req<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
	<span class="token comment">//res.end()方法的作用</span>
	<span class="token comment">//向客户端发送指定的内容，并结束这次请求的处理过程</span>
	res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-解决中文乱码问题" tabindex="-1"><a class="header-anchor" href="#_4-解决中文乱码问题" aria-hidden="true">#</a> 4.解决<code>中文乱码</code>问题</h3><p>当调用res.end()方法，向客户端发送中文内容的时候，会出现乱码问题，此时，需要手动设置内容的编码格式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// 发送的内容包含中文</span>
	<span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">您请求的url地址是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>req<span class="token punctuation">.</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,请求的method类型是</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>req<span class="token punctuation">.</span>method<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
	<span class="token comment">// 为了防止中文显示乱码的问题，需要设置响应头Content-Type的值为text/html; charset=utf-8</span>
	res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text/html; charset=utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 把包含中文的内容，响应给客户端</span>
	res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="根据不同的url响应不同的html内容" tabindex="-1"><a class="header-anchor" href="#根据不同的url响应不同的html内容" aria-hidden="true">#</a> 根据不同的url响应不同的html内容</h2><h3 id="_1-核心实现步骤" tabindex="-1"><a class="header-anchor" href="#_1-核心实现步骤" aria-hidden="true">#</a> 1.核心实现步骤</h3><ul><li>获取请求的url地址</li><li>设置默认的响应内容为404 Not found</li><li>判断用户请求的是否为/ 或 /index.html首页</li><li>判断用户请求的是否为/about.html关于页面</li><li>设置Content-Type 响应头，防止中文乱码</li><li>使用res.end() 把内容响应给客户端</li></ul><h3 id="_2-动态响应内容" tabindex="-1"><a class="header-anchor" href="#_2-动态响应内容" aria-hidden="true">#</a> 2.动态响应内容</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url  <span class="token comment">// 获取请求的url地址</span>
	<span class="token keyword">let</span> content <span class="token operator">=</span> <span class="token string">&#39;&lt;h1&gt; 404 Not found!&lt;/h1&gt;&#39;</span>  <span class="token comment">// 设置默认的内容为404 Not found </span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span> <span class="token operator">||</span> url <span class="token operator">===</span> <span class="token string">&#39;/index.html&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		content <span class="token operator">=</span> <span class="token string">&#39;&lt;h1&gt;首页&lt;/h1&gt;&#39;</span>  <span class="token comment">// 用户请求的是首页</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">===</span> <span class="token string">&#39;/about.html&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		content <span class="token operator">=</span> <span class="token string">&#39;&lt;h1&gt;关于页面&lt;/h1&gt;&#39;</span>  <span class="token comment">// 用户请求的是关于页面</span>
	<span class="token punctuation">}</span>

	res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;text/html; charset=utf-8&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 设置Content-Type响应头， 防止中文乱码</span>
	res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>  <span class="token comment">// 把内容发送给客户端</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40),o=[p];function c(i,l){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","1.http模块.html.vue"]]);export{r as default};
